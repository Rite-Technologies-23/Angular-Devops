name: "Test and build Angular app"

on:
  push:
    branches:
      - '*'
  pull_request:
    branches:
      - '*'

jobs:
  build:
    name: Test and Build Angular App
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Dependencies
        run: npm install

      - name: Run Tests and Generate Reports
        run: |
          mkdir -p test-results
          npx ng test --watch=false --browsers=ChromeHeadless --karma-config=karma.conf.js || true

      - name: Convert LCOV to HTML Report
        run: |
          sudo apt-get update && sudo apt-get install -y lcov
          genhtml coverage/angular.io-example/coverage/lcov.info --output-directory test-results/lcov-html

      - name: Check for Failed CRITICAL Tests
        run: |
          REPORT="./test-results/test-results.xml"
          echo "Parsing $REPORT for failed CRITICAL tests..."

          if [[ -f "$REPORT" ]]; then
            FAILED_CRITICAL=$(awk '/<testcase/ {test=$0} /<failure/ {if (test ~ /\[CRITICAL\]/) print test}' "$REPORT" | wc -l)
            if [[ "$FAILED_CRITICAL" -gt 0 ]]; then
              echo "$FAILED_CRITICAL CRITICAL test(s) failed."
              exit 1
            else
              echo "All CRITICAL test cases passed."
            fi
          else
            echo "Test report not found. Skipping CRITICAL test check."
          fi

      - name: Enforce Code Coverage Threshold
        run: |
          COVERAGE_FILE=coverage/angular.io-example/coverage/coverage-summary.json
          echo "Using coverage file: $COVERAGE_FILE"
          COVERAGE=$(node -p "require('./$COVERAGE_FILE').total.statements.pct")
          echo "Statements Coverage: $COVERAGE%"
          THRESHOLD=75
          if (( $(echo "$COVERAGE < $THRESHOLD" | bc -l) )); then
            echo "Code coverage is below the required $THRESHOLD% threshold."
            exit 1
          else
            echo "Code coverage is acceptable."
          fi

      - name: Install junit2html
        run: |
          sudo apt-get install -y python3-pip
          pip3 install junit2html

      - name: Convert JUnit XML to HTML
        run: |
          junit2html test-results/test-results.xml > test-results/test-results.html

      - name: Upload LCOV HTML Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: Angular-LCOV-HTML-Report
          path: test-results/lcov-html

      - name: Upload JUnit XML Report
        uses: actions/upload-artifact@v4
        with:
          name: Angular-JUnit-Report
          path: test-results/test-results.xml

      - name: Upload JUnit HTML Report
        uses: actions/upload-artifact@v4
        with:
          name: Angular-JUnit-HTML-Report
          path: test-results/test-results.html

      - name: Upload Raw Coverage Files
        uses: actions/upload-artifact@v4
        with:
          name: Angular-Coverage-Report
          path: coverage/

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Build Angular App
        run: npm run build -- --configuration production
